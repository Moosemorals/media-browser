/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fluffypeople.pvrbrowser;

import java.io.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.StatusLine;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;
import org.teleal.cling.UpnpService;
import org.teleal.cling.UpnpServiceImpl;
import org.teleal.cling.model.action.ActionInvocation;
import org.teleal.cling.model.message.UpnpResponse;
import org.teleal.cling.model.message.header.STAllHeader;
import org.teleal.cling.model.meta.RemoteDevice;
import org.teleal.cling.model.meta.Service;
import org.teleal.cling.model.types.UDAServiceType;
import org.teleal.cling.registry.DefaultRegistryListener;
import org.teleal.cling.registry.Registry;
import org.teleal.cling.support.contentdirectory.callback.Browse;
import org.teleal.cling.support.model.BrowseFlag;
import org.teleal.cling.support.model.DIDLContent;
import org.teleal.cling.support.model.container.Container;
import org.teleal.cling.support.model.item.Item;

/**
 *
 * @author Osric
 */
public class TreeFrame extends javax.swing.JFrame {

    private static final Logger log = Logger.getLogger(TreeFrame.class);
    private final DefaultTreeModel treeModel;
    private final DefaultMutableTreeNode rootNode;
    private final DownloadListModel downloadListModel;
    private final UpnpService upnp;
    private File downloadFolder = null;
    private final DownloadThread dlManager;
    private DefaultRegistryListener upnpListener = new DefaultRegistryListener() {

        @Override
        public void remoteDeviceAdded(Registry registry, RemoteDevice device) {
            setStatus("Found device:" + device.getDisplayString());
            DefaultMutableTreeNode node = new DefaultMutableTreeNode(device.getDisplayString());
            treeModel.insertNodeInto(node, rootNode, rootNode.getChildCount());
            populateTree(device, node);
        }
    };

    private void populateTree(RemoteDevice device, DefaultMutableTreeNode parentNode) {
        Service service = device.findService(new UDAServiceType("ContentDirectory"));
        if (service != null) {
            upnp.getControlPoint().execute(new DeviceBrowse(service, "0", parentNode));
        }
    }

    /**
     * Creates new form TreeFrame
     */
    public TreeFrame() {

        upnp = new UpnpServiceImpl(upnpListener);

        downloadListModel = new DownloadListModel();
        dlManager = new DownloadThread();
        dlManager.start();

        rootNode = new DefaultMutableTreeNode("Devices");
        treeModel = new DefaultTreeModel(rootNode);

        initComponents();
        setStatus("Looking for media servers");
        upnp.getControlPoint().search(new STAllHeader());
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content
     * of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        allFiles = new javax.swing.JProgressBar();
        currentFile = new javax.swing.JProgressBar();
        jScrollPane3 = new javax.swing.JScrollPane();
        downloadList = new javax.swing.JList<DownloadQueueItem>();
        jScrollPane4 = new javax.swing.JScrollPane();
        displayTree = new javax.swing.JTree();
        statusLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        chooserButton = new javax.swing.JButton();
        downloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        chooseMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Media Browser");

        downloadList.setModel(downloadListModel);
        downloadList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        downloadList.setEnabled(false);
        downloadList.setFocusable(false);
        jScrollPane3.setViewportView(downloadList);

        displayTree.setModel(treeModel);
        displayTree.setShowsRootHandles(true);
        jScrollPane4.setViewportView(displayTree);

        statusLabel.setFocusable(false);

        chooserButton.setText("Set Download Folder");
        chooserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooserButtonActionPerformed(evt);
            }
        });

        downloadButton.setText("Download Selected");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(chooserButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(downloadButton)
                .addGap(29, 29, 29))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chooserButton)
                    .addComponent(downloadButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jMenu1.setText("File");

        chooseMenuItem.setText("Set Download Folder");
        chooseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(chooseMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addComponent(jScrollPane4)
                    .addComponent(allFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(allFiles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(currentFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(statusLabel)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private boolean chooseDownloadFolder() {
        final JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            downloadFolder = fc.getSelectedFile();
            return true;
        } else {
            return false;
        }
    }

    private void chooserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooserButtonActionPerformed
        chooseDownloadFolder();
    }//GEN-LAST:event_chooserButtonActionPerformed

    private void downloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadButtonActionPerformed
        while (downloadFolder == null) {
            chooseDownloadFolder();
        }

        for (TreePath p : displayTree.getSelectionPaths()) {
            TreeItemHolder item = (TreeItemHolder) ((DefaultMutableTreeNode) p.getLastPathComponent()).getUserObject();
            if (item.getType() == TreeItemHolder.Type.ITEM) {
                String url = item.getPayload().getFirstResource().getValue();
                log.debug("Download URL " + url);
                dlManager.addTarget((Item) item.getPayload());

            }
        }
    }//GEN-LAST:event_downloadButtonActionPerformed

    private void chooseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chooseMenuItemActionPerformed
        chooseDownloadFolder();
    }//GEN-LAST:event_chooseMenuItemActionPerformed

    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            log.error("Can't change look and feel", ex);
        }

        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new TreeFrame().setVisible(true);
            }
        });
    }

    private void setStatus(final String status) {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run() {
                statusLabel.setText(status);
            }
        });
    }

    private class DownloadThread implements Runnable {

        private final BlockingQueue<DownloadQueueItem> queue = new LinkedBlockingQueue<>();
        private final AtomicBoolean running = new AtomicBoolean(false);
        private final HttpClient client = new DefaultHttpClient();

        public void start() {
            if (running.compareAndSet(false, true)) {
                Thread t = new Thread(this, "Download");
                t.start();
            }
        }

        @Override
        public void run() {
            while (running.get()) {
                DownloadQueueItem target;
                try {
                    target = queue.take();
                } catch (InterruptedException ex) {
                    log.error("Unexpected Iterruption", ex);
                    running.set(false);
                    return;
                }

                Item item = target.getTarget();
                log.debug("Downloading " + item.getTitle());
                target.setState(DownloadQueueItem.State.DOWNLOADING);
                try {
                    final HttpGet request = new HttpGet(item.getFirstResource().getValue());
                    final HttpResponse response = client.execute(request);

                    final StatusLine result = response.getStatusLine();
                    if (result.getStatusCode() != 200) {
                        log.error("Can't download item");
                        continue;
                    }

                    long len = Long.parseLong(response.getFirstHeader("Content-Length").getValue(), 10);

                    final HttpEntity body = response.getEntity();

                    log.debug("Downloading " + len + " bytes");

                    if (len > 0) {
                        currentFile.setMaximum((int) len);
                    } else {
                        currentFile.setIndeterminate(true);
                    }

                    final InputStream in = body.getContent();
                    final File downloadTarget = new File(downloadFolder, item.getTitle());

                    log.debug("Filename " + downloadTarget.getAbsolutePath());

                    final OutputStream out = new FileOutputStream(downloadTarget);

                    byte[] buffer = new byte[1024 * 4];
                    long count = 0;
                    int n = 0;
                    while (-1 != (n = in.read(buffer))) {
                        out.write(buffer, 0, n);
                        count += n;
                        final int transfer = (int)count;
                        SwingUtilities.invokeLater(new Runnable() {
                            public void run() {
                                currentFile.setValue(transfer);
                            }
                        });

                    }

                    in.close();
                    out.close();

                    currentFile.setIndeterminate(false);
                    currentFile.setValue(currentFile.getMaximum());

                    target.setState(DownloadQueueItem.State.COMPLETED);
                } catch (IOException ex) {
                    log.error("IOExcption", ex);
                }
            }
        }

        public void addTarget(Item target) {
            DownloadQueueItem i = new DownloadQueueItem(target);
            downloadListModel.add(i);
            allFiles.setMaximum(downloadListModel.getSize());
            queue.add(i);
        }
    }

    private class DeviceBrowse extends Browse {

        private final DefaultMutableTreeNode parent;
        private final Service service;

        public DeviceBrowse(Service service, String id, DefaultMutableTreeNode parent) {
            super(service, id, BrowseFlag.DIRECT_CHILDREN);
            this.parent = parent;
            this.service = service;
        }

        @Override
        public void received(ActionInvocation actionInvocation, DIDLContent didl) {
            for (Container c : didl.getContainers()) {
                //       System.out.println("Container : " + c.getId() + c.getTitle());
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(new TreeItemHolder(c, TreeItemHolder.Type.CONTAINER));
                treeModel.insertNodeInto(childNode, parent, parent.getChildCount());

                upnp.getControlPoint().execute(new DeviceBrowse(service, c.getId(), childNode));
            }
            for (Item i : didl.getItems()) {
                //           System.out.println("Item: " + i.getId() + i.getTitle());
                DefaultMutableTreeNode childNode = new DefaultMutableTreeNode(new TreeItemHolder(i, TreeItemHolder.Type.ITEM));
                treeModel.insertNodeInto(childNode, parent, parent.getChildCount());
            }
        }

        @Override
        public void updateStatus(Browse.Status status) {
            //     log.debug("Status: " + status.getDefaultMessage());
        }

        @Override
        public void failure(ActionInvocation invocation, UpnpResponse operation, String defaultMsg) {
            //    log.debug("Failure: " + defaultMsg);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar allFiles;
    private javax.swing.JMenuItem chooseMenuItem;
    private javax.swing.JButton chooserButton;
    private javax.swing.JProgressBar currentFile;
    private javax.swing.JTree displayTree;
    private javax.swing.JButton downloadButton;
    private javax.swing.JList<DownloadQueueItem> downloadList;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel statusLabel;
    // End of variables declaration//GEN-END:variables
}
